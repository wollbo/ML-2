addpath datasets
folder = 'datasets/cifar';

N = 1000;
K_ensemble = zeros(N,N,5,10);
for k = 1:5
    load([char(folder) '/data_batch_' num2str(k) '.mat'])
    x = double(data);
    x = x./max(max(x)); % normalize
    targets = double(labels)+1; % for indexing
    targets = targets(1:N);
    dims = max(targets);
    %t = (-1)*ones(N,dims);
    t = zeros(N,dims,5);
    for i = 1:N % create one hot
        t(i,targets(i)) = 1;
    end
    sigma = 10;
    for n = 1:10
        K_ensemble(:,:,k,n) = matGaussK(xDiff(x(1+(n-1)*N:n*N,:)),sigma);
    end
disp(k)    
end

%% only on windows
load('D:\MATLAB\Repos\ML-2\datasets\cifar\test_batch.mat');
%% 
M = 1000;
testData = double(data);
testData = testData(1:M,:);
testTargets = double(labels)+1;
testTargets = testTargets(1:M);


dims = max(testTargets);
tt = (-1)*ones(M,dims);
for i = 1:M % create one hot
    tt(i,testTargets(i)) = 1;
end
% note: should only be used for verification NOT in predictor

%%

I = eye(N);
lambda = 0.2;
M = 100;
k_ensemble = zeros(M,5,10);
for l = 1:5
load([char(folder) '/data_batch_' num2str(l) '.mat'])
x = double(data);
x = x./max(max(x));
x = x(1:M,:);
sigma = 10; % to avoid rounding to zero on non diagonal elements
for j = 1:10
    testDiff = xDiff(x(1+(j-1)*N:N*j,:),testData);
    k_ensemble(:,:,l,j) = matGaussK(testDiff,sigma);
end
disp(l)
end
disp('done')
